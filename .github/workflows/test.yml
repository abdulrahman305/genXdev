name: Run Unit Tests

on:
  push:
    branches: [main, master]

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Wait for dependencies to be available
        if: github.event_name == 'push'
        shell: pwsh
        run: |
          Write-Host "Waiting 1 minutes to ensure dependency modules are available..." -ForegroundColor Yellow
          Start-Sleep -Seconds 60
          Write-Host "Proceeding with tests" -ForegroundColor Green

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: modules/GenXdev/1.290.2025

      - name: Install PowerShell 7.5.0
        shell: pwsh
        run: |
          Write-Host "Current PowerShell version: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan

          # Check if PowerShell 7 is already installed
          $existingPS7 = "C:\Program Files\PowerShell\7"
          if (Test-Path "$existingPS7\pwsh.exe") {
            Write-Host "PowerShell 7 already exists at: $existingPS7" -ForegroundColor Yellow
            $existingVersion = & "$existingPS7\pwsh.exe" -Command '$PSVersionTable.PSVersion.ToString()'
            Write-Host "Existing version: $existingVersion" -ForegroundColor Cyan
          }

          Write-Host "Installing PowerShell 7.5.0..." -ForegroundColor Yellow

          $uri = "https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/PowerShell-7.5.0-win-x64.msi"
          $msiPath = "$env:TEMP\PowerShell-7.5.0-win-x64.msi"
          $logPath = "$env:TEMP\ps-install.log"

          try {
            Write-Host "Downloading PowerShell 7.5.0..." -ForegroundColor Yellow
            Invoke-WebRequest -Uri $uri -OutFile $msiPath -UseBasicParsing -ErrorAction Stop
            Write-Host "Download complete: $msiPath" -ForegroundColor Green
            Write-Host "File size: $((Get-Item $msiPath).Length / 1MB) MB" -ForegroundColor Cyan

            Write-Host "Installing MSI (this may take a few minutes)..." -ForegroundColor Yellow
            $arguments = @(
              "/i"
              "`"$msiPath`""
              "/quiet"
              "/norestart"
              "/log"
              "`"$logPath`""
              "ADD_PATH=1"
              "ENABLE_PSREMOTING=1"
            )
            Write-Host "MSI Arguments: $($arguments -join ' ')" -ForegroundColor Cyan

            $process = Start-Process msiexec.exe -ArgumentList $arguments -Wait -NoNewWindow -PassThru

            Write-Host "MSI process exited with code: $($process.ExitCode)" -ForegroundColor $(if ($process.ExitCode -eq 0) { 'Green' } else { 'Red' })

            if ($process.ExitCode -ne 0) {
              Write-Host "`nMSI installation failed with exit code: $($process.ExitCode)" -ForegroundColor Red
              Write-Host "Common exit codes:" -ForegroundColor Yellow
              Write-Host "  1603 = Fatal error during installation" -ForegroundColor Yellow
              Write-Host "  1618 = Another installation is in progress" -ForegroundColor Yellow
              Write-Host "  1619 = Installation package could not be opened" -ForegroundColor Yellow

              if (Test-Path $logPath) {
                Write-Host "`nLast 100 lines of installation log:" -ForegroundColor Yellow
                Get-Content $logPath | Select-Object -Last 100 | Write-Host
              } else {
                Write-Host "Log file not found at: $logPath" -ForegroundColor Red
              }
              exit $process.ExitCode
            }

            # Update PATH for subsequent steps
            $newPath = "C:\Program Files\PowerShell\7"
            Add-Content -Path $env:GITHUB_PATH -Value $newPath

            Write-Host "`n✓ PowerShell 7.5.0 installed successfully" -ForegroundColor Green

            # Verify installation
            if (Test-Path "$newPath\pwsh.exe") {
              $installedVersion = & "$newPath\pwsh.exe" -Command '$PSVersionTable.PSVersion.ToString()'
              Write-Host "✓ Verified installation: $installedVersion" -ForegroundColor Green
            } else {
              Write-Warning "pwsh.exe not found at expected location: $newPath"
              exit 1
            }
          } catch {
            Write-Error "Failed to install PowerShell: $($_.Exception.Message)"
            Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red

            if (Test-Path $logPath) {
              Write-Host "`nInstallation log:" -ForegroundColor Yellow
              Get-Content $logPath | Select-Object -Last 100 | Write-Host
            }
            exit 1
          }

      - name: Checkout GenXdev.AI
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.AI
          path: modules/GenXdev.AI/1.290.2025

      - name: Checkout GenXdev.Coding
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Coding
          path: modules/GenXdev.Coding/1.290.2025

      - name: Checkout GenXdev.Console
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Console
          path: modules/GenXdev.Console/1.290.2025

      - name: Checkout GenXdev.Data
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Data
          path: modules/GenXdev.Data/1.290.2025

      - name: Checkout GenXdev.FileSystem
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.FileSystem
          path: modules/GenXdev.FileSystem/1.290.2025

      - name: Checkout GenXdev.Helpers
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Helpers
          path: modules/GenXdev.Helpers/1.290.2025

      - name: Checkout GenXdev.Media
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Media
          path: modules/GenXdev.Media/1.290.2025

      - name: Checkout GenXdev.Queries
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Queries
          path: modules/GenXdev.Queries/1.290.2025

      - name: Checkout GenXdev.Webbrowser
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Webbrowser
          path: modules/GenXdev.Webbrowser/1.290.2025

      - name: Checkout GenXdev.Windows
        uses: actions/checkout@v4
        with:
          repository: genXdev/GenXdev.Windows
          path: modules/GenXdev.Windows/1.290.2025

      - name: Install dependencies (Pester and PSScriptAnalyzer)
        shell: pwsh
        run: |
          if (-not [IO.Directory]::Exists("$ENV:LOCALAPPDATA\GenXdev.PowerShell")) {
            [IO.Directory]::CreateDirectory("$ENV:LOCALAPPDATA\GenXdev.PowerShell")
          }
          '{"AllowInstall_GenXdevGlobal": "true"}' | Out-File "$ENV:LOCALAPPDATA\GenXdev.PowerShell\SoftwareConsent.json" -Force

          # Setup module path before installing dependencies
          $modulesPath = "${{ github.workspace }}/modules"
          $env:PSModulePath = "$modulesPath;$env:PSModulePath"
          Write-Host "PSModulePath: $env:PSModulePath" -ForegroundColor Cyan

          Write-Host "Installing required modules..." -ForegroundColor Yellow

          # Install Pester if needed
          if (-not (Get-Module -ListAvailable -Name Pester)) {
            Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
          }

          # Install PSScriptAnalyzer if needed
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
            Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser
          }

          Write-Host "✓ Dependencies installed" -ForegroundColor Green

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          # Setup module path for this step
          $modulesPath = "${{ github.workspace }}/modules"
          $env:PSModulePath = "$modulesPath;$env:PSModulePath"
          Write-Host "PSModulePath: $env:PSModulePath" -ForegroundColor Cyan

          # Import GenXdev modules
          Import-Module GenXdev -Force -ErrorAction Stop

          # Run tests
          $results = GenXdev.Coding\Assert-GenXdevTest -TestFailedAction Continue -Verbosity Detailed -ErrorAction SilentlyContinue -SkipPesterTests

          if (-not $results.Success) {
              $results.AnalyzerResults | ConvertTo-Json -Depth 10
              exit 1
          }

          exit 0

      - name: Run Pester tests
        shell: pwsh
        run: |
          # Setup module path for this step
          $modulesPath = "${{ github.workspace }}/modules"
          $env:PSModulePath = "$modulesPath;$env:PSModulePath"
          Write-Host "PSModulePath: $env:PSModulePath" -ForegroundColor Cyan

          # Import GenXdev modules
          Import-Module GenXdev -Force -ErrorAction Stop

          # Run tests
          $results = GenXdev.Coding\Assert-GenXdevTest -TestFailedAction Continue -Verbosity Detailed -ErrorAction SilentlyContinue -SkipPSAnalyzerTests

          if (-not $results.Success) {
              $results.TestResults.Failed | ConvertTo-Json -Depth 10
              exit 1
          }

          exit 0

      - name: Upgrade to latest PowerShell (7.5.3)
        shell: pwsh
        run: |
          Write-Host "Upgrading to PowerShell 7.5.3..." -ForegroundColor Yellow
          $uri = "https://github.com/PowerShell/PowerShell/releases/download/v7.5.3/PowerShell-7.5.3-win-x64.msi"
          $msiPath = "$env:TEMP\PowerShell-7.5.3-win-x64.msi"

          Invoke-WebRequest -Uri $uri -OutFile $msiPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i `"$msiPath`" /quiet /norestart REINSTALLMODE=amus REINSTALL=ALL ADD_PATH=1" -Wait -NoNewWindow

          # Update PATH for subsequent steps
          $newPath = "C:\Program Files\PowerShell\7"
          Add-Content -Path $env:GITHUB_PATH -Value $newPath

          Write-Host "PowerShell 7.5.3 installed successfully" -ForegroundColor Green

          # Verify version
          & "C:\Program Files\PowerShell\7\pwsh.exe" -Command '$PSVersionTable.PSVersion'

      - name: Re-run PSScriptAnalyzer on PowerShell 7.5.3
        shell: pwsh
        run: |
          Write-Host "Re-running tests on PowerShell 7.5.3..." -ForegroundColor Cyan
          Write-Host "Current PowerShell version: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan

          # Setup module path for this step
          $modulesPath = "${{ github.workspace }}/modules"
          $env:PSModulePath = "$modulesPath;$env:PSModulePath"

          # Import GenXdev modules
          Import-Module GenXdev -Force -ErrorAction Stop

          # Run tests
          $results = GenXdev.Coding\Assert-GenXdevTest -TestFailedAction Continue -Verbosity Detailed -ErrorAction SilentlyContinue -SkipPesterTests

          if (-not $results.Success) {
              $results.AnalyzerResults | ConvertTo-Json -Depth 10
              exit 1
          }

          exit 0

      - name: Re-run Pester tests on PowerShell 7.5.3
        shell: pwsh
        run: |
          Write-Host "Re-running Pester tests on PowerShell 7.5.3..." -ForegroundColor Cyan
          Write-Host "Current PowerShell version: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan

          # Setup module path for this step
          $modulesPath = "${{ github.workspace }}/modules"
          $env:PSModulePath = "$modulesPath;$env:PSModulePath"

          # Import GenXdev modules
          Import-Module GenXdev -Force -ErrorAction Stop

          # Run tests
          $results = GenXdev.Coding\Assert-GenXdevTest -TestFailedAction Continue -Verbosity Detailed -ErrorAction SilentlyContinue -SkipPSAnalyzerTests

          if (-not $results.Success) {
              $results.TestResults.Failed | ConvertTo-Json -Depth 10
              exit 1
          }

          exit 0
